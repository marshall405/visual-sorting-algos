{"version":3,"sources":["components/NavBar.js","utils.js","components/Quicksort.js","components/Mergesort.js","components/Bubblesort.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","link","setLink","className","onClick","swap","arr","i","j","a","tmp","sleep","ms","Promise","resolve","setTimeout","Quicksort","height","width","window","screen","sorting","values","states","Sketch","p","setup","createCanvas","Array","floor","length","random","frameRate","draw","background","forEach","val","stroke","fill","rect","useEffect","p5","document","getElementById","classList","add","startSort","quicksort","state","start","end","partition","index","all","pivot","id","remove","Math","href","gist","Mergesort","mergesort","mid","round","slice","left","right","merge","leftIds","push","leftIdx","findIndex","includes","splice","sorted","find","l","shift","r","concat","Bubblesort","bubblesort","n","count","App","useState","class","data-ribbon","title","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9c47f6b0.chunk.js","sourcesContent":["import React from 'react'\n\nimport '../styles/navbar.css'\n\nexport default function NavBar({link, setLink}) {\n    return (\n        <nav>\n            <h1 className='logo'> Visual Sorting Algorithms </h1>\n            <ul>\n                <li className={ link === 1 ? 'active' : null} onClick={() => setLink(1)}> Quick sort </li>\n                <li className={ link === 2 ? 'active' : null} onClick={() => setLink(2)}> Merge sort  </li>\n                <li className={ link === 3 ? 'active' : null} onClick={() => setLink(3)}> Bubble sort </li>\n            </ul>\n        </nav>\n    )\n}\n","async function swap(arr, i, j){\n    let tmp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = tmp\n}\n\nfunction sleep(ms = 30) {\n    return new Promise(resolve => setTimeout(resolve, ms))\n}\n\nexport {\n    swap, sleep\n}","import React, { useEffect} from 'react'\nimport ReactEmbedGist from 'react-embed-gist'\n\nimport p5 from 'p5'\n\nimport {swap, sleep} from '../utils.js'\n\nexport default function Quicksort() {\n    let width = window.screen.width - 40\n    let sorting = false\n    let values = []\n    let states = []\n    let height;\n    const Sketch = (p) => {\n        let w = 5\n        p.setup = () => {\n            p.createCanvas(width > 600 ? 600 : width ,400)\n            height = p.height\n            values = new Array(p.floor(p.width / w))\n            for(let i = 0; i < values.length; i++){\n                values[i] = p.random(p.height)\n                states[i] = -1\n            }\n            p.frameRate(120)\n\n        }\n        p.draw = () => {\n            p.background(51);\n            values.forEach( (val,i) => {\n                p.stroke(0)\n                if(states[i] === 0){\n                    p.fill(138, 43, 226)\n                }else if(states[i] === 1){\n                    p.fill(134, 238, 177)\n                }else {\n                    p.fill(255)\n                }\n                p.rect(i * w, p.height - val, w, val)\n            })\n        }\n        \n    }\n    useEffect( () => {\n        new p5(Sketch, document.getElementById(\"canvas\"))\n        document.getElementById(\"content\").classList.add('main')\n    })\n\n    const startSort = async () => {\n        if(!sorting){\n            sorting = true\n            document.getElementById('start').classList.add('hide')\n            await quicksort(values, 0, values.length - 1)\n            states.forEach( (state,i) => states[i] = 0 )\n        }\n    }\n\n    async function quicksort(arr, start, end) {\n\n        if(start >= end || !sorting) return\n\n        let index = await partition(arr, start, end)\n        states[index] = -1\n        await Promise.all([\n            quicksort(arr, start, index - 1),\n            quicksort(arr, index + 1, end)\n        ])\n\n    }\n\n    async function partition(arr, start, end) {\n        for(let i = start; i < end; i++){\n            states[i] = 1\n        }\n        let pivot = arr[end]\n        let index = start\n        states[index] = 0\n        for(let i = start; i < end; i++){\n            if(arr[i] <= pivot) {\n                await sleep()\n                swap(arr, i, index)\n                states[index] = -1\n                index++\n                states[index] = 0\n            }\n        }\n        await sleep()\n        swap(arr, index, end)\n        for(let i = start; i < end; i++){\n            states[i] = -1\n        }\n        return index\n    }\n    \n\n    const reset = () => {\n        sorting = false\n        document.getElementById('start').classList.remove('hide')\n        for(let i = 0; i < values.length; i++){\n            values[i] = Math.random() * height\n            states[i] = -1\n        }\n    }\n\n    return (\n        <div id=\"content\">\n        <section>\n            <h1>  <code> quicksort() </code> </h1>\n            <div className=\"container\">\n                <div className=\"actions col-1\">\n                    <button id=\"start\" onClick={startSort}> Start </button>\n                    <button onClick={reset}> Reset </button>\n                </div>\n                <div id=\"canvas\"></div>\n                <div className=\"notes\">\n                    <p>Quicksort is a divide-and-conquer algorithm. It works by selecting a 'pivot' element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. The sub-arrays are then sorted recursively. This can be done in-place, requiring small additional amounts of memory to perform the sorting.</p>\n                    <p><a href=\"https://en.wikipedia.org/wiki/Quicksort\">Wikipedia</a></p>\n                </div>\n            </div>\n            <div className=\"runtime\">\n                <div>\n                    <div>\n                        <h6> Time Complexity</h6>\n                        <ul>\n                            <li> Best Case: O(n log n)</li>\n                            <li> Average: O(n log n)</li>\n                            <li> Worst Case: O(n^2)</li>\n                        </ul>\n                    </div>\n                    <div>\n                        <h6> Space Complexity</h6>\n                        <ul>\n                            <li> O(log n) </li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </section>\n        <section>\n            <h3> How it works! </h3>\n            <div className=\"info\"> \n                <ReactEmbedGist gist=\"marshall405/5ae084e8a53c1c2a271e0a1074e448a2\"/>\n                <section>\n                   <p>\n                        We start by creating our base case to make sure we can break out. We then define our <code>index</code> and call <code>partition()</code>. Once <code>partition()</code> returns, we call Line: 6 - <code>quicksort(array, start, index -1 )</code> and Line 7 - <code>quicksort(array, index + 1, end)</code>. Now, you may be wondering why we are passing in <code>index - 1</code> and <code>index + 1</code>?. We do this because our <code>partition()</code> function will return the <code>index</code> of an element where everything to the left of it is less than and everything to the right is greater than.(We will disucss furthur, down below)\n                   </p>\n                   <p>\n                       Our <code>partition()</code> function is where the logic of <code>quicksort</code> lives. \n                       We first define our <code>pivot</code>, in the example to the left, we use the last element in the array. \n                       Next, we define our <code>pivotIndex</code> to equal the <code>start</code>. \n                       This is because we want to track where, in the array, we should <code>swap</code> elements. \n                       We can now <code>loop</code> through our array. For each element, we check if its less than or equal to our <code>Pivot</code>(defined on Line 13). \n                       If its true, we <code>swap</code> our current element in our <code>for loop</code> with the element at the <code>pivotIndex</code>.\n                        Keep in mind, we are not swaping our <code>Pivot</code>, we are using a variable defined as <code>pivotIndex</code>, which is originally equal to our <code>start</code> variable. \n                        Everytime we make a <code>swap</code>, we need to <code>increment</code> our <code>pivotIndex</code> by one. \n                        Once our <code>for loop</code> ends, we make our final <code>swap</code>, this time our <code>pivot</code> and <code>pivotIndex</code>. \n                        Now our array has all elements less than our <code>pivot</code> to the left and all elements greater than the <code>pivot</code> to the right. \n                        We can now return the <code>pivotIndex</code>.\n                    </p>\n                </section>\n            </div>\n        </section>\n        </div>\n    )\n}","import React, { useEffect} from 'react'\nimport ReactEmbedGist from 'react-embed-gist'\n\nimport p5 from 'p5'\n\nimport {sleep} from '../utils.js'\n\nexport default function Mergesort() {\n    let width = window.screen.width - 40\n    let sorting = false\n    let values = []\n    let states = []\n    let height;\n\n    const Sketch = (p) => {\n        let w = 5\n        p.setup = () => {\n            p.createCanvas(width > 600 ? 600 : width ,400)\n            height = p.height\n            values = new Array(p.floor(p.width / w))\n            for(let i = 0; i < values.length; i++){\n                values[i] = {\n                    val: p.random(p.height),\n                    id: i,\n                    state: -1\n                } \n                states[i] = -1\n            }\n            p.frameRate(120)\n        }\n        p.draw = () => {\n            p.background(51);\n            values.forEach( ({val,state},i) => {\n                p.stroke(0)\n                if(state === 0){\n                    p.fill(138, 43, 226)\n                }else if(state === 1){\n                    p.fill(134, 238, 177)\n                }else {\n                    p.fill(255)\n                }\n                p.rect(i * w, p.height - val, w, val)\n            })\n\n        }\n    }\n    useEffect( () => {\n        new p5(Sketch, document.getElementById('canvas'))\n        document.getElementById(\"content\").classList.add('main')\n    })\n\n    async function mergesort(a) {\n        if (a.length <= 1) {\n          return a;\n        }\n       \n        let mid = Math.round( a.length / 2);\n        \n        let left = await mergesort(a.slice(0, mid))\n        let right = await mergesort(a.slice(mid))\n   \n        return await merge(left,right);\n      }\n      \n    async function merge(left, right) {\n        if(!sorting) return \n        let leftIds = []\n        left.forEach( ({id}) => {\n            leftIds.push(id)\n        })\n    \n        let leftIdx = values.findIndex( val => leftIds.includes(val.id))\n\n        values.splice(leftIdx, left.length , ...left)\n\n        values.splice(leftIdx + left.length, right.length, ...right)\n\n        let sorted = [];\n        while (left && left.length > 0 && right && right.length > 0) {\n            if(!sorting) break\n            if (left[0].val <= right[0].val) {\n                values.find( val => val.id === left[0].id).state = 0\n                let l = left.shift()\n                l.state = 1\n                sorted.push(l);\n            }\n            else {  \n                values.find( val => val.id === right[0].id).state = 0\n                let r = right.shift()\n                r.state = 1\n                sorted.push(r);\n            }\n            await sleep()\n        }\n\n        if(!sorting) return \n\n        sorted.forEach( val => val.state = 1)\n        values.splice(leftIdx, sorted.length, ...sorted)\n        values.forEach( val => val.state = -1)\n        return sorted.concat(left, right);\n    }\n\n    const reset = () => {\n        sorting = false\n        document.getElementById('start').classList.remove('hide')\n        for(let i = 0; i < values.length; i++){\n            values[i] = {\n                val: Math.random() * height,\n                id: i,\n                state: -1\n            } \n        }\n    }\n\n    const start = async () => {\n        if(!sorting) {\n            sorting = true\n            document.getElementById('start').classList.add('hide')\n            await mergesort(values)\n            if(sorting){\n                values.forEach( val => val.state = 0)\n            }\n\n        }\n    }\n\n    return (\n        <div id=\"content\">\n        <section>\n            <h1>  <code> mergesort() </code> </h1>\n            <div className=\"container\">\n                <div className=\"actions col-1\">\n                    <button id=\"start\" onClick={start} > Start </button>\n                    <button onClick={reset}> Reset </button>\n                </div>\n                <div id=\"canvas\"></div>\n            \n                <div className=\"notes\">\n                    <p>In computer science, merge sort (also commonly spelled mergesort) is an efficient, general-purpose, comparison-based sorting algorithm. Most implementations produce a stable sort, which means that the order of equal elements is the same in the input and output. Merge sort is a divide and conquer algorithm that was invented by John von Neumann in 1945.</p>\n                    <p><a href=\"https://en.wikipedia.org/wiki/Merge_sort\">Wikipedia</a></p>\n                </div>\n            </div>\n            <div className=\"runtime\">\n                <div>\n                    <div>\n                        <h6> Time Complexity</h6>\n                        <ul>\n                            <li> Average: O(n log n)</li>\n                            <li> Worst Case: O(n log n)</li>\n                        </ul>\n                    </div>\n                    <div>\n                        <h6> Space Complexity</h6>\n                        <ul>\n                            <li> O(n) </li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </section>\n        <section>\n            <h3> How it works! </h3>\n            <div className=\"info\"> \n                <ReactEmbedGist gist=\"marshall405/bbafb9d2622afc8cbd8b3014bb48620c\"/>\n                <section>\n                    <p> Eh! <code>Mergesort</code>, am I right? Let's get started. We first create our base case so we can break out. \n                        Notice here that, unlike <code>quicksort</code>, we are returning an <code>array</code>! \n                        Next, we need to define the <code>middle</code> of the <code>array</code>. \n                        We can now call <code>mergesort</code> for both the left and right sides of our <code>array</code>. \n                        Everytime new call to <code>mergesort</code>, we are passing in a new <code>array</code>. \n                        We <code>recursively</code> continue to call <code>mergesort</code> until we return an <code>array</code> of length 1. \n                        We now have a <code>sorted array</code>. We will return back to Line 5 and Line 6 and continue on. \n                        We can now created an empty <code>array</code>, this will be used to push elements from both the left and right <code>arrays</code>. \n                        We can iterate over the left and right <code>arrays</code> and push the lesser element to the <code>sortedArray</code>. \n                        Once our first <code>while loop</code> breaks, we push any remaining elements from the left <code>array</code> and than any remaining elements from the right <code>array</code>. \n                        Finally, we return the <code>sortedArray</code> </p> \n                </section>\n            </div>\n        </section>\n        </div>\n    )\n}\n","import React, { useEffect} from 'react'\nimport ReactEmbedGist from 'react-embed-gist'\nimport p5 from 'p5'\n\nimport {swap, sleep} from '../utils.js'\n\n\nexport default function Bubblesort() {\n    let width = window.screen.width - 40\n    let sorting = false\n    let values = []\n    let states = []\n    let height;\n    const Sketch = (p) => {\n        let w = 5\n        p.setup = () => {\n            p.createCanvas(width > 600 ? 600 : width ,400)\n            height = p.height\n            values = new Array(p.floor(p.width / w))\n            for(let i = 0; i < values.length; i++){\n                values[i] = p.random(p.height)\n                states[i] = -1\n            }\n            p.frameRate(120)\n\n        }\n        p.draw = () => {\n            p.background(51);\n            values.forEach( (val,i) => {\n                p.stroke(0)\n                if(states[i] === 0){\n                    p.fill(138, 43, 226)\n                }else if(states[i] === 1){\n                    p.fill(134, 238, 177)\n                }else {\n                    p.fill(255)\n                }\n                p.rect(i * w, p.height - val, w, val)\n            })\n        }\n        \n    }\n    useEffect( () => {\n        new p5(Sketch, document.getElementById(\"canvas\"))\n        document.getElementById(\"content\").classList.add('main')\n    })\n\n    const startSort = async () => {\n        if(!sorting){\n            sorting = true\n            document.getElementById('start').classList.add('hide')\n            await bubblesort(values)\n            if(sorting){\n                states.forEach( (state,i) => states[i] = 0 )\n            }\n        }\n    }\n\n    async function bubblesort(arr) {\n        let count\n        let n = 1\n        while(true){\n            if(!sorting) break\n            count = 0\n            for(let i = 0; i < arr.length - n; i++){\n                if(!sorting) break\n                states[i + 1] = 1\n\n                if(arr[i] > arr[i + 1]){\n                    await swap(arr, i, i + 1)\n                    count++\n                }\n                await sleep(4)\n                states[i+1] = -1\n            }\n            n++\n            await sleep(20)\n            if(count === 0) break\n        }\n\n        if(!sorting) {\n            for(let i = 0; i < values.length; i++){\n                states[i] = -1\n            }\n        }\n    }\n\n    const reset = () => {\n        sorting = false\n        document.getElementById('start').classList.remove('hide')\n        for(let i = 0; i < values.length; i++){\n            values[i] = Math.random() * height\n            states[i] = -1\n        }\n    }\n\n    return (\n        <div id=\"content\">\n        <section>\n            <h1>  <code> bubblesort() </code> </h1>\n            <div className=\"container\">\n                <div className=\"actions col-1\">\n                    <button id=\"start\" onClick={startSort}> Start </button>\n                    <button onClick={reset}> Reset </button>\n                </div>\n                <div id=\"canvas\"></div>\n                <div className=\"notes\">\n                    <p>Bubble sort, sometimes referred to as sinking sort, is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. The algorithm, which is a comparison sort, is named for the way smaller or larger elements \"bubble\" to the top of the list.</p>\n                    <p><a href=\"https://en.wikipedia.org/wiki/Bubble_sort\">Wikipedia</a></p>\n                </div>\n            </div>\n            <div className=\"runtime\">\n                <div>\n                    <div>\n                        <h6> Time Complexity</h6>\n                        <ul>\n                            <li> Best Case: O(n)</li>\n                            <li> Average: O(n^2)</li>\n                            <li> Worst Case: O(n^2)</li>\n                        </ul>\n                    </div>\n                    <div>\n                        <h6> Space Complexity</h6>\n                        <ul>\n                            <li> O(1) </li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </section>\n        <section>\n            <h3> How it works! </h3>\n            <div className=\"info\"> \n                <ReactEmbedGist gist=\"marshall405/c0fe7e5e86088e84bcb4649a27bc77f7\"/>\n                <section>\n                    <p> Compare two elements and <code>swap</code> positions if the first element is greater than the second element. <code>array[j] > array[j + 1]</code></p>\n                    <p> Continue through the <code>array</code> until we reach the end. At this point the largest number in the <code>array</code> will be the last element.</p>\n                    <p> With the first pass through the <code>array</code> out of the way, we go back to the beginning, and repeat until the outer <code>for loop</code> has finished.</p>\n                </section>\n            </div>\n        </section>\n        </div>\n    )\n}","import React, {useState} from 'react';\n\nimport './App.css';\n\n\nimport NavBar from './components/NavBar';\nimport Quicksort from './components/Quicksort';\nimport Mergesort from './components/Mergesort';\nimport Bubblesort from './components/Bubblesort';\n\nfunction App() {\n  const [link, setLink] = useState(1)\n\n  return (\n    <div className=\"App\">\n      <NavBar link={link} setLink={setLink}/>\n      <a class=\"github-fork-ribbon\" href=\"https://github.com/marshall405/visual-sorting-algos\" data-ribbon=\"Fork me on GitHub\" title=\"Fork me on GitHub\">Fork me on GitHub</a>\n      <main id=\"main\">\n        { link === 1 ? <Quicksort /> : null}\n        { link === 2 ? <Mergesort /> : null}\n        { link === 3 ? <Bubblesort /> : null}\n        <footer> Marshall Slemp </footer> \n      </main>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}